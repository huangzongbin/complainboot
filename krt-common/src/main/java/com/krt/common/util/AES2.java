package com.krt.common.util;

import org.apache.commons.codec.binary.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

/**
 * AES算法（加密算法：MCRYPT_RIJNDAEL_128，算法模式：MCRYPT_MODE_ECB，补码方式：PKCS5Padding，密钥为长度32个字符）
 * @author Koow
 * 2018-04-19
 */
public class AES2 {

    /**
     * 加密
     * @param sSrc
     *   加密字段
     * @param sKey
     *   key秘钥
     * @param state
     *   1：加密完成后Base64转码
     *   2: 加密完成后二进制转换成16进制
     * @return
     * @throws Exception
     */
    public static String Encrypt(String sSrc, String sKey,Integer state) throws Exception {
        if (sKey == null) {
            System.out.print("Key为空null");
            return null;
        }
        byte[] raw = sKey.getBytes("utf-8");
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//"算法/模式/补码方式"
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        byte[] encrypted = cipher.doFinal(sSrc.getBytes("utf-8"));

        return state==1?new Base64().encodeToString(encrypted):AesUtils.parseByte2HexStr(encrypted);
    }

    /**
     * 解密
     * @param sSrc
     *   解密字段
     * @param sKey
     *   key秘钥
     * @param state
     *   1：解密前Base64解码
     *   2: 解密前将16进制转换为二进制
     * @return
     * @throws Exception
     */
    public static String Decrypt(String sSrc, String sKey,Integer state) throws Exception {
        try {
            // 判断Key是否正确
            if (sKey == null) {
                System.out.print("Key为空null");
                return null;
            }

            byte[] raw = sKey.getBytes("utf-8");
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec);
            byte[] encrypted1 =state==1?new Base64().decode(sSrc):AesUtils.parseHexStr2Byte(sSrc);
            try {
                byte[] original = cipher.doFinal(encrypted1);
                String originalString = new String(original,"utf-8");
                return originalString;
            } catch (Exception e) {
                System.out.println(e.toString());
                return null;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println(ex.toString());
            return null;
        }
    }

    public static void main(String[] args) throws Exception {
        /*
         * 此处使用AES-128-ECB加密模式，key需要为16位。
         */
        String cKey = "a031fbe01b32d023dbab6550f471169c";
        String cSrc = "u9a8c\\u8bc1\\u7b7e\\u540d\\u9519\\u8bef";
        /*System.out.println(cSrc);
        // 加密
        String enString = AES2.Encrypt(cSrc, cKey,2);
        System.out.println("加密后的字串是：" + enString);*/

        // 解密
        String data = "960E78909320145221BD0A490CD5751C1CD15C02AFE8512E2446B518D2E16DF781A3D476875FF0EC09BD1F4873DAAB7FC51B7291AFB45ED836DB999B87829794EE0F289BD431C1C2E2FC99B45B82EB10112EFECC7FFA4E33A16EEED3F8B0D2EE343044A14CF44D64839882BF46E3D69194CD395A60B93EC7C1E2305053C39EF05E94742FA4B42499588B108F5B865ECCF09953C8B3FD1EBD7637AD87791B09BFB239EB5EB8488334400FDDB2CC6B237EC2A87344E8643DB7B8493D1A510AC47E690E2A4948C92A6D846AEC1EF51E60F60742142A78EB5432F72DFC3AC21CAD12D9971113D8C6FCAE64363F59284FBE806F14D53733C2FA7469B22BF858176F2A2013F14F504762AE1D1FF69A1224DA06690E2A4948C92A6D846AEC1EF51E60F61EC906203AD375CC6BFBDF4117B5F18D18F7D6445B83E2731C40881CB600BC01E4B1BEAC2ADB63B751F4D5E6EDB947A31D37D31DE085B326A107905CBC84FC58DF9D49F012AA3553CFD8ED8264A2452F9B4DFAB89F29C0DDDAF17A71DF15A2E5C3F976055652F1528D39D3B79B38BB9BFC2BB9D1196193FFFA5F560BF7359DF171BE8DB015DF07817B1B6F1F256E4ECC9114208260C4C81E98FB0D6B54AC18751314C2A71ECF252C3BED1AD6B0E754A456E8178A22C702F6E33C1CF0CA35AA9C893EC2587BCBB1B750BD08CC69D67F929D175952C2C151605093A6678C540CE4B339C0708542F96FD1290E099A3106ACDF0FD554CC462BA0151E12DA76466536D19B8E66F8CA0E8BF9244E0EAF3DE82F63DC295393E0E6855241C9EC68319416C52BA9985128232658780D3B961644B6B78E80246D76C9526C8118A5A9E0A5073E8CEADDF7F3B30E8D2841E7C7C16F4E001E33AFD6F433AE171B8680F19909B4D8A99B5367ADCB86E6085D9D2B7E7AB413B7DCDD10E195B7D23A76BD5912F2BE025868836AEB6ACC85E14EE46A7801F5B95D4929F6B447BC44A67ED16FBD0C75A2AFA2BEB8E8BB7E1F48CA7CFB4BF9B51FC9F167269C1BD11107F9D00D6790714B264A5661D0FF3E72DB7D25C7729B6423B2E04BD979AFDB3E5DA7B00F81CDF1D8CC980A5B272C075928D38A2F33312F0F61E859118AAAF54122CB58479F0EE8C600DEC5E7C1238A367FED63D2B564E4A86D86FDC80E34E342F3084744E996A83A4971A44C94CB72204DDEF03EE411D21A7661DBB3C2B27750EB1D5A8FEA6F5F1C8F6A849B517B831E4A49397D2DDDC1EE4D7B2719BAB6970573D79CD7C8B2E1E15E2B959D60015D750B348DEBE7A6A4CEF1258B5512101CCFA91B3FEAF0B437E5C172246E0CC93B329BEC0300052C22394BCAF53C26D61905E677365A8659B5F0F465BCA3074C0A5012A6484E11BBF752926BB62BAF8513FF9C9E8BB7B956F89CA52D16EF23CA8C491A6AC3582C865D200B4605A35BAC3461CA12E008A9D64C85D437E3138BD276ACBCDEF9152DA30893E161EEFE1203D20CA4C4227C62CBA4E27E2657CDE07B1FBC468A1CEEED6F640B63F5DCC50CE2441C29C4DD93971427132260E56CED95EAF5D5F550566B52783E8CEADDF7F3B30E8D2841E7C7C16F4E001E33AFD6F433AE171B8680F19909B4D8A99B5367ADCB86E6085D9D2B7E7AB413B7DCDD10E195B7D23A76BD5912F2BEAFAD8BAF1DD94E6085357D3D5991D6D4B95D4929F6B447BC44A67ED16FBD0C75A2AFA2BEB8E8BB7E1F48CA7CFB4BF9B51FC9F167269C1BD11107F9D00D6790714B264A5661D0FF3E72DB7D25C7729B6485DE52FD38924F7666C1DFC58E2EB8AEBBED9DBC228536E9EF8A16DA66C705ED70BBABA4E3FA70A6FAB97D566701FE36C600DEC5E7C1238A367FED63D2B564E4A86D86FDC80E34E342F3084744E996A83A4971A44C94CB72204DDEF03EE411D21A7661DBB3C2B27750EB1D5A8FEA6F5F1C8F6A849B517B831E4A49397D2DDDC1EE4D7B2719BAB6970573D79CD7C8B2E1E15E2B959D60015D750B348DEBE7A6A4CEF1258B5512101CCFA91B3FEAF0B437E5C172246E0CC93B329BEC0300052C22C9EC706FF975424F8FA6E4C258A85FDA";

        String DeString = AES2.Decrypt(data, "a031fbe01b32d023dbab6550f471169c",2);
        System.out.println("解密后的字串是：" + DeString);
    }

}